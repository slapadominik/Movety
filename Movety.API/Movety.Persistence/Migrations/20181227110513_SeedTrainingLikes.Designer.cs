// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movety.Persistence.DbContexts;

namespace Movety.Persistence.Migrations
{
    [DbContext(typeof(TrainingsDbContext))]
    [Migration("20181227110513_SeedTrainingLikes")]
    partial class SeedTrainingLikes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Movety.Persistence.DAO.Athlethe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthdate");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("Modified");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Athlethes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67995fa7-a8ac-421f-89ee-cbff3345d139"),
                            Birthdate = new DateTime(2002, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2018, 12, 27, 12, 5, 12, 743, DateTimeKind.Local).AddTicks(3854),
                            Description = "Moje zainteresowania to....",
                            FirstName = "Jan",
                            Gender = "m",
                            LastName = "Kowalski",
                            UserId = new Guid("893a3823-2412-4d04-8f66-0f09cc52c788")
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<DateTime>("Created");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<DateTime?>("Modified");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2cdd84c-7857-47a2-a0d1-69d8021486b0"),
                            Created = new DateTime(2018, 12, 27, 12, 5, 12, 740, DateTimeKind.Local).AddTicks(4865),
                            Latitude = 51.107883000000001,
                            Longitude = 13.038538000000001
                        },
                        new
                        {
                            Id = new Guid("cd2ce8f4-5ae2-4e85-8c67-673f5549423a"),
                            Created = new DateTime(2018, 12, 27, 12, 5, 12, 742, DateTimeKind.Local).AddTicks(2666),
                            Latitude = 57.107883000000001,
                            Longitude = 20.038537999999999
                        },
                        new
                        {
                            Id = new Guid("7fc4d86b-0f2c-49d8-904e-0df5e376dbda"),
                            Created = new DateTime(2018, 12, 27, 12, 5, 12, 742, DateTimeKind.Local).AddTicks(2765),
                            Latitude = 88.107883000000001,
                            Longitude = 40.038538000000003
                        },
                        new
                        {
                            Id = new Guid("bc0958fa-2898-4481-9502-1f8c09f2a95b"),
                            Created = new DateTime(2018, 12, 27, 12, 5, 12, 742, DateTimeKind.Local).AddTicks(2785),
                            Latitude = 54.107883000000001,
                            Longitude = 12.038538000000001
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.SportField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SportFields");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2018, 12, 27, 12, 5, 12, 742, DateTimeKind.Local).AddTicks(4431),
                            Name = "cycling"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2018, 12, 27, 12, 5, 12, 742, DateTimeKind.Local).AddTicks(5977),
                            Name = "swimming"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2018, 12, 27, 12, 5, 12, 742, DateTimeKind.Local).AddTicks(6010),
                            Name = "climbing"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2018, 12, 27, 12, 5, 12, 742, DateTimeKind.Local).AddTicks(6026),
                            Name = "iceskating"
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("DatetimeFrom");

                    b.Property<DateTime>("DatetimeTo");

                    b.Property<string>("Description");

                    b.Property<Guid>("LocationId");

                    b.Property<int>("MaxParticipants");

                    b.Property<DateTime?>("Modified");

                    b.Property<int>("SportFieldId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SportFieldId");

                    b.ToTable("TrainingProposals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02f3ef91-2894-414d-adc2-c24a78400a12"),
                            Author = "Jan Kowalski",
                            Created = new DateTime(2018, 12, 27, 12, 5, 12, 742, DateTimeKind.Local).AddTicks(7770),
                            DatetimeFrom = new DateTime(2019, 5, 3, 8, 20, 0, 0, DateTimeKind.Unspecified),
                            DatetimeTo = new DateTime(2019, 5, 3, 8, 20, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lorem ipsum lorem ipsum",
                            LocationId = new Guid("e2cdd84c-7857-47a2-a0d1-69d8021486b0"),
                            MaxParticipants = 4,
                            SportFieldId = 1,
                            Title = "Rower we Wro!"
                        },
                        new
                        {
                            Id = new Guid("ce89948b-5d56-431f-ab03-20f353d873d9"),
                            Author = "Kamil Jacewicz",
                            Created = new DateTime(2018, 12, 27, 12, 5, 12, 743, DateTimeKind.Local).AddTicks(350),
                            DatetimeFrom = new DateTime(2020, 3, 5, 15, 20, 0, 0, DateTimeKind.Unspecified),
                            DatetimeTo = new DateTime(2020, 3, 5, 17, 20, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lorem ipsum lorem ipsum2",
                            LocationId = new Guid("cd2ce8f4-5ae2-4e85-8c67-673f5549423a"),
                            MaxParticipants = 5,
                            SportFieldId = 2,
                            Title = "Wspinaczka na Tarnogaju"
                        },
                        new
                        {
                            Id = new Guid("c0b1c7b6-695e-4dd1-ba35-b2110c918a88"),
                            Author = "Anna Kowalska",
                            Created = new DateTime(2018, 12, 27, 12, 5, 12, 743, DateTimeKind.Local).AddTicks(404),
                            DatetimeFrom = new DateTime(2019, 4, 12, 15, 20, 0, 0, DateTimeKind.Unspecified),
                            DatetimeTo = new DateTime(2019, 4, 12, 17, 20, 0, 0, DateTimeKind.Unspecified),
                            Description = "Zapraszam wszystkich na łyżwy na godzinę 19:30. ",
                            LocationId = new Guid("bc0958fa-2898-4481-9502-1f8c09f2a95b"),
                            MaxParticipants = 10,
                            SportFieldId = 4,
                            Title = "Łyżwy w Pszowie"
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposalsAcceptance", b =>
                {
                    b.Property<Guid>("TrainingProposalsId");

                    b.Property<Guid>("UserId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Modified");

                    b.HasKey("TrainingProposalsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingProposalsAcceptances");
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposalsLikes", b =>
                {
                    b.Property<Guid>("TrainingProposalsId");

                    b.Property<Guid>("UserId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Modified");

                    b.HasKey("TrainingProposalsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingProposalsLikes");

                    b.HasData(
                        new
                        {
                            TrainingProposalsId = new Guid("02f3ef91-2894-414d-adc2-c24a78400a12"),
                            UserId = new Guid("893a3823-2412-4d04-8f66-0f09cc52c788"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TrainingProposalsId = new Guid("02f3ef91-2894-414d-adc2-c24a78400a12"),
                            UserId = new Guid("3779b923-f7e2-4ba0-8f18-c7fcdc9f6eb0"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("893a3823-2412-4d04-8f66-0f09cc52c788"),
                            Created = new DateTime(2018, 12, 27, 12, 5, 12, 743, DateTimeKind.Local).AddTicks(1064),
                            Email = "jankowalski@gmail.com",
                            PasswordHash = "asdasdasd123213",
                            SecurityStamp = "asd123",
                            Username = "kowalskijan3"
                        },
                        new
                        {
                            Id = new Guid("3779b923-f7e2-4ba0-8f18-c7fcdc9f6eb0"),
                            Created = new DateTime(2018, 12, 27, 12, 5, 12, 743, DateTimeKind.Local).AddTicks(2840),
                            Email = "kamilszybki@gmail.com",
                            PasswordHash = "asdasdasd123213",
                            SecurityStamp = "asd123",
                            Username = "kamil91"
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.Athlethe", b =>
                {
                    b.HasOne("Movety.Persistence.DAO.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposals", b =>
                {
                    b.HasOne("Movety.Persistence.DAO.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movety.Persistence.DAO.SportField", "SportField")
                        .WithMany()
                        .HasForeignKey("SportFieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposalsAcceptance", b =>
                {
                    b.HasOne("Movety.Persistence.DAO.TrainingProposals", "TrainingProposals")
                        .WithMany("TrainingProposalsAcceptances")
                        .HasForeignKey("TrainingProposalsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movety.Persistence.DAO.User", "User")
                        .WithMany("TrainingProposalsAcceptances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposalsLikes", b =>
                {
                    b.HasOne("Movety.Persistence.DAO.TrainingProposals", "TrainingProposals")
                        .WithMany("TrainingProposalsLikes")
                        .HasForeignKey("TrainingProposalsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movety.Persistence.DAO.User", "User")
                        .WithMany("TrainingProposalsLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
