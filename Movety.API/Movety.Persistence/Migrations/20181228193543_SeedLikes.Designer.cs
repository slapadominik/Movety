// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movety.Persistence.DbContexts;

namespace Movety.Persistence.Migrations
{
    [DbContext(typeof(TrainingsDbContext))]
    [Migration("20181228193543_SeedLikes")]
    partial class SeedLikes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Movety.Persistence.DAO.Athlethe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthdate");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("Modified");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Athlethes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1580a16-cb72-42e1-8773-9c6718860c1a"),
                            Birthdate = new DateTime(2002, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 638, DateTimeKind.Local).AddTicks(6612),
                            Description = "Moje zainteresowania to....",
                            FirstName = "Jan",
                            Gender = "m",
                            LastName = "Kowalski",
                            UserId = new Guid("6056a1f9-d095-4f3e-ad0f-6aad0b03c16e")
                        },
                        new
                        {
                            Id = new Guid("0b13b989-1c12-451f-8037-bb054237494b"),
                            Birthdate = new DateTime(1985, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 638, DateTimeKind.Local).AddTicks(8819),
                            Description = "Narty, siatkowka, koszykowka - sport.",
                            FirstName = "Ania",
                            Gender = "m",
                            LastName = "Boruc",
                            UserId = new Guid("58c390b9-a6d4-4ac0-8e70-4a5d4efd0a78")
                        },
                        new
                        {
                            Id = new Guid("7aa8941c-a1d2-438c-8890-29e5cbee6b1d"),
                            Birthdate = new DateTime(1989, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 638, DateTimeKind.Local).AddTicks(8860),
                            Description = "Narty, siatkowka, koszykowka - sport.",
                            FirstName = "Wojciech",
                            Gender = "m",
                            LastName = "Nowak",
                            UserId = new Guid("9e01965e-b696-41e6-9337-aeb58f4fc14f")
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<DateTime>("Created");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<DateTime?>("Modified");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12e06bc7-5094-4bb2-a3c1-a9b884730ef1"),
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 636, DateTimeKind.Local).AddTicks(495),
                            Latitude = 51.107883000000001,
                            Longitude = 13.038538000000001
                        },
                        new
                        {
                            Id = new Guid("5ba81a11-2ef6-456e-8d20-f1490bbbb4dd"),
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 637, DateTimeKind.Local).AddTicks(6364),
                            Latitude = 57.107883000000001,
                            Longitude = 20.038537999999999
                        },
                        new
                        {
                            Id = new Guid("34f5e9fe-aa0a-44fe-81c0-3f1734454c20"),
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 637, DateTimeKind.Local).AddTicks(6454),
                            Latitude = 88.107883000000001,
                            Longitude = 40.038538000000003
                        },
                        new
                        {
                            Id = new Guid("d88d60c9-cbb3-473b-ac43-c69991fea8e2"),
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 637, DateTimeKind.Local).AddTicks(6470),
                            Latitude = 54.107883000000001,
                            Longitude = 12.038538000000001
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.SportField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SportFields");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 637, DateTimeKind.Local).AddTicks(8124),
                            Name = "cycling"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 637, DateTimeKind.Local).AddTicks(9334),
                            Name = "swimming"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 637, DateTimeKind.Local).AddTicks(9367),
                            Name = "climbing"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 637, DateTimeKind.Local).AddTicks(9387),
                            Name = "iceskating"
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("DatetimeFrom");

                    b.Property<DateTime>("DatetimeTo");

                    b.Property<string>("Description");

                    b.Property<Guid>("LocationId");

                    b.Property<int>("MaxParticipants");

                    b.Property<DateTime?>("Modified");

                    b.Property<int>("SportFieldId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SportFieldId");

                    b.ToTable("TrainingProposals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6f43ba8-3978-432d-be1d-e519402d6e51"),
                            Author = "Jan Kowalski",
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 638, DateTimeKind.Local).AddTicks(716),
                            DatetimeFrom = new DateTime(2019, 5, 3, 8, 20, 0, 0, DateTimeKind.Unspecified),
                            DatetimeTo = new DateTime(2019, 5, 3, 8, 20, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lorem ipsum lorem ipsum",
                            LocationId = new Guid("12e06bc7-5094-4bb2-a3c1-a9b884730ef1"),
                            MaxParticipants = 4,
                            SportFieldId = 1,
                            Title = "Rower we Wro!"
                        },
                        new
                        {
                            Id = new Guid("35a77813-8041-45e2-9673-ded45ab24ee8"),
                            Author = "Kamil Jacewicz",
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 638, DateTimeKind.Local).AddTicks(3317),
                            DatetimeFrom = new DateTime(2020, 3, 5, 15, 20, 0, 0, DateTimeKind.Unspecified),
                            DatetimeTo = new DateTime(2020, 3, 5, 17, 20, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lorem ipsum lorem ipsum2",
                            LocationId = new Guid("5ba81a11-2ef6-456e-8d20-f1490bbbb4dd"),
                            MaxParticipants = 5,
                            SportFieldId = 2,
                            Title = "Wspinaczka na Tarnogaju"
                        },
                        new
                        {
                            Id = new Guid("5e408190-29e5-448d-83ec-2df8e86e8ecd"),
                            Author = "Anna Kowalska",
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 638, DateTimeKind.Local).AddTicks(3379),
                            DatetimeFrom = new DateTime(2019, 4, 12, 15, 20, 0, 0, DateTimeKind.Unspecified),
                            DatetimeTo = new DateTime(2019, 4, 12, 17, 20, 0, 0, DateTimeKind.Unspecified),
                            Description = "Zapraszam wszystkich na łyżwy na godzinę 19:30. ",
                            LocationId = new Guid("d88d60c9-cbb3-473b-ac43-c69991fea8e2"),
                            MaxParticipants = 10,
                            SportFieldId = 4,
                            Title = "Łyżwy w Pszowie"
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposalsAcceptance", b =>
                {
                    b.Property<Guid>("TrainingProposalsId");

                    b.Property<Guid>("UserId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Modified");

                    b.HasKey("TrainingProposalsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingProposalsAcceptances");
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposalsLikes", b =>
                {
                    b.Property<Guid>("TrainingProposalsId");

                    b.Property<Guid>("UserId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Modified");

                    b.HasKey("TrainingProposalsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingProposalsLikes");

                    b.HasData(
                        new
                        {
                            TrainingProposalsId = new Guid("b6f43ba8-3978-432d-be1d-e519402d6e51"),
                            UserId = new Guid("6056a1f9-d095-4f3e-ad0f-6aad0b03c16e"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TrainingProposalsId = new Guid("b6f43ba8-3978-432d-be1d-e519402d6e51"),
                            UserId = new Guid("58c390b9-a6d4-4ac0-8e70-4a5d4efd0a78"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TrainingProposalsId = new Guid("b6f43ba8-3978-432d-be1d-e519402d6e51"),
                            UserId = new Guid("9e01965e-b696-41e6-9337-aeb58f4fc14f"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TrainingProposalsId = new Guid("35a77813-8041-45e2-9673-ded45ab24ee8"),
                            UserId = new Guid("6056a1f9-d095-4f3e-ad0f-6aad0b03c16e"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TrainingProposalsId = new Guid("35a77813-8041-45e2-9673-ded45ab24ee8"),
                            UserId = new Guid("58c390b9-a6d4-4ac0-8e70-4a5d4efd0a78"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TrainingProposalsId = new Guid("35a77813-8041-45e2-9673-ded45ab24ee8"),
                            UserId = new Guid("9e01965e-b696-41e6-9337-aeb58f4fc14f"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6056a1f9-d095-4f3e-ad0f-6aad0b03c16e"),
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 638, DateTimeKind.Local).AddTicks(3929),
                            Email = "jankowalski@gmail.com",
                            PasswordHash = "asdasdasd123213",
                            SecurityStamp = "asd123",
                            Username = "kowalskijan3"
                        },
                        new
                        {
                            Id = new Guid("58c390b9-a6d4-4ac0-8e70-4a5d4efd0a78"),
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 638, DateTimeKind.Local).AddTicks(5603),
                            Email = "kamilszybki@gmail.com",
                            PasswordHash = "asdasdasd123213",
                            SecurityStamp = "asd123",
                            Username = "kamil91"
                        },
                        new
                        {
                            Id = new Guid("9e01965e-b696-41e6-9337-aeb58f4fc14f"),
                            Created = new DateTime(2018, 12, 28, 20, 35, 43, 638, DateTimeKind.Local).AddTicks(5640),
                            Email = "jankowalski2@gmail.com",
                            PasswordHash = "asdasdasd123213",
                            SecurityStamp = "asd123",
                            Username = "kowalskijan3"
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.Athlethe", b =>
                {
                    b.HasOne("Movety.Persistence.DAO.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposals", b =>
                {
                    b.HasOne("Movety.Persistence.DAO.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movety.Persistence.DAO.SportField", "SportField")
                        .WithMany()
                        .HasForeignKey("SportFieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposalsAcceptance", b =>
                {
                    b.HasOne("Movety.Persistence.DAO.TrainingProposals", "TrainingProposals")
                        .WithMany("TrainingProposalsAcceptances")
                        .HasForeignKey("TrainingProposalsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movety.Persistence.DAO.User", "User")
                        .WithMany("TrainingProposalsAcceptances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposalsLikes", b =>
                {
                    b.HasOne("Movety.Persistence.DAO.TrainingProposals", "TrainingProposals")
                        .WithMany("TrainingProposalsLikes")
                        .HasForeignKey("TrainingProposalsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movety.Persistence.DAO.User", "User")
                        .WithMany("TrainingProposalsLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
