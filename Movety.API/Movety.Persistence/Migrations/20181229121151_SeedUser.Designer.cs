// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movety.Persistence.DbContexts;

namespace Movety.Persistence.Migrations
{
    [DbContext(typeof(TrainingsDbContext))]
    [Migration("20181229121151_SeedUser")]
    partial class SeedUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Movety.Persistence.DAO.Athlethe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthdate");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("Modified");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Athlethes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df73185c-e294-468e-8e8d-36c40b404736"),
                            Birthdate = new DateTime(2002, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 843, DateTimeKind.Local).AddTicks(7837),
                            Description = "Moje zainteresowania to....",
                            FirstName = "Jan",
                            Gender = "m",
                            LastName = "Kowalski",
                            UserId = new Guid("7d46d491-2166-451e-beaf-a57bb10cb91c")
                        },
                        new
                        {
                            Id = new Guid("4e2ae5fb-6dac-4b93-b0ee-63df0f413976"),
                            Birthdate = new DateTime(1985, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 844, DateTimeKind.Local).AddTicks(278),
                            Description = "Narty, siatkowka, koszykowka - sport.",
                            FirstName = "Ania",
                            Gender = "m",
                            LastName = "Boruc",
                            UserId = new Guid("99dbdda5-86d0-422a-b1b7-3d1f7719e446")
                        },
                        new
                        {
                            Id = new Guid("2922dd1a-e768-41df-98ff-c827c4b64d46"),
                            Birthdate = new DateTime(1989, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 844, DateTimeKind.Local).AddTicks(327),
                            Description = "Narty, siatkowka, koszykowka - sport.",
                            FirstName = "Wojciech",
                            Gender = "m",
                            LastName = "Nowak",
                            UserId = new Guid("b7d2a6c1-2ba1-4aa0-83ea-ffa0434f66c5")
                        },
                        new
                        {
                            Id = new Guid("7c41511c-a39b-4225-8f4c-c00409adffb6"),
                            Birthdate = new DateTime(1993, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 844, DateTimeKind.Local).AddTicks(347),
                            Description = "Narty, siatkowka, koszykowka - sport.",
                            FirstName = "Damian",
                            Gender = "m",
                            LastName = "Nowak",
                            UserId = new Guid("38e88f51-a4bd-4163-be6e-cdaad099ba10")
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<DateTime>("Created");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<DateTime?>("Modified");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1efc45d5-e79b-40d5-9b85-82cb76143737"),
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 840, DateTimeKind.Local).AddTicks(8901),
                            Latitude = 50.102074999999999,
                            Longitude = 18.509135000000001
                        },
                        new
                        {
                            Id = new Guid("cd056011-4267-4b38-9666-0116123cb563"),
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 842, DateTimeKind.Local).AddTicks(6398),
                            Latitude = 50.094844999999999,
                            Longitude = 18.519753000000001
                        },
                        new
                        {
                            Id = new Guid("b90f325f-2bad-47f0-8124-4c3235754bbf"),
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 842, DateTimeKind.Local).AddTicks(6509),
                            Latitude = 88.107883000000001,
                            Longitude = 40.038538000000003
                        },
                        new
                        {
                            Id = new Guid("778320cc-8aaa-4460-9465-977346985be0"),
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 842, DateTimeKind.Local).AddTicks(6525),
                            Latitude = 51.114697,
                            Longitude = 17.046592
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.SportField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SportFields");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 842, DateTimeKind.Local).AddTicks(8281),
                            Name = "cycling"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 842, DateTimeKind.Local).AddTicks(9697),
                            Name = "swimming"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 842, DateTimeKind.Local).AddTicks(9734),
                            Name = "climbing"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 842, DateTimeKind.Local).AddTicks(9751),
                            Name = "iceskating"
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("DatetimeFrom");

                    b.Property<DateTime>("DatetimeTo");

                    b.Property<string>("Description");

                    b.Property<Guid>("LocationId");

                    b.Property<int>("MaxParticipants");

                    b.Property<DateTime?>("Modified");

                    b.Property<int>("SportFieldId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SportFieldId");

                    b.ToTable("TrainingProposals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae30c6a1-4da8-424a-918a-17b6e0e7d754"),
                            Author = "Jan Kowalski",
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 843, DateTimeKind.Local).AddTicks(1170),
                            DatetimeFrom = new DateTime(2019, 5, 3, 8, 20, 0, 0, DateTimeKind.Unspecified),
                            DatetimeTo = new DateTime(2019, 5, 3, 8, 20, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lorem ipsum lorem ipsum",
                            LocationId = new Guid("1efc45d5-e79b-40d5-9b85-82cb76143737"),
                            MaxParticipants = 4,
                            SportFieldId = 1,
                            Title = "Rower we Wro!"
                        },
                        new
                        {
                            Id = new Guid("a6645f56-0316-43a7-aa41-64f7ee58eaf1"),
                            Author = "Kamil Jacewicz",
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 843, DateTimeKind.Local).AddTicks(3939),
                            DatetimeFrom = new DateTime(2020, 3, 5, 15, 20, 0, 0, DateTimeKind.Unspecified),
                            DatetimeTo = new DateTime(2020, 3, 5, 17, 20, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lorem ipsum lorem ipsum2",
                            LocationId = new Guid("cd056011-4267-4b38-9666-0116123cb563"),
                            MaxParticipants = 5,
                            SportFieldId = 2,
                            Title = "Wspinaczka na Tarnogaju"
                        },
                        new
                        {
                            Id = new Guid("4a4066b8-402d-46cc-b167-7d02aa426689"),
                            Author = "Anna Kowalska",
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 843, DateTimeKind.Local).AddTicks(3997),
                            DatetimeFrom = new DateTime(2019, 4, 12, 15, 20, 0, 0, DateTimeKind.Unspecified),
                            DatetimeTo = new DateTime(2019, 4, 12, 17, 20, 0, 0, DateTimeKind.Unspecified),
                            Description = "Zapraszam wszystkich na łyżwy na godzinę 19:30. ",
                            LocationId = new Guid("778320cc-8aaa-4460-9465-977346985be0"),
                            MaxParticipants = 10,
                            SportFieldId = 4,
                            Title = "Łyżwy w Pszowie"
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposalsAcceptance", b =>
                {
                    b.Property<Guid>("TrainingProposalsId");

                    b.Property<Guid>("UserId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Modified");

                    b.HasKey("TrainingProposalsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingProposalsAcceptances");
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposalsLikes", b =>
                {
                    b.Property<Guid>("TrainingProposalsId");

                    b.Property<Guid>("UserId");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("Modified");

                    b.HasKey("TrainingProposalsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingProposalsLikes");

                    b.HasData(
                        new
                        {
                            TrainingProposalsId = new Guid("ae30c6a1-4da8-424a-918a-17b6e0e7d754"),
                            UserId = new Guid("7d46d491-2166-451e-beaf-a57bb10cb91c"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TrainingProposalsId = new Guid("ae30c6a1-4da8-424a-918a-17b6e0e7d754"),
                            UserId = new Guid("99dbdda5-86d0-422a-b1b7-3d1f7719e446"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TrainingProposalsId = new Guid("ae30c6a1-4da8-424a-918a-17b6e0e7d754"),
                            UserId = new Guid("b7d2a6c1-2ba1-4aa0-83ea-ffa0434f66c5"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TrainingProposalsId = new Guid("a6645f56-0316-43a7-aa41-64f7ee58eaf1"),
                            UserId = new Guid("7d46d491-2166-451e-beaf-a57bb10cb91c"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TrainingProposalsId = new Guid("a6645f56-0316-43a7-aa41-64f7ee58eaf1"),
                            UserId = new Guid("99dbdda5-86d0-422a-b1b7-3d1f7719e446"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TrainingProposalsId = new Guid("a6645f56-0316-43a7-aa41-64f7ee58eaf1"),
                            UserId = new Guid("b7d2a6c1-2ba1-4aa0-83ea-ffa0434f66c5"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d46d491-2166-451e-beaf-a57bb10cb91c"),
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 843, DateTimeKind.Local).AddTicks(4600),
                            Email = "jankowalski@gmail.com",
                            PasswordHash = "asdasdasd123213",
                            SecurityStamp = "asd123",
                            Username = "kowalskijan3"
                        },
                        new
                        {
                            Id = new Guid("99dbdda5-86d0-422a-b1b7-3d1f7719e446"),
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 843, DateTimeKind.Local).AddTicks(6713),
                            Email = "kamilszybki@gmail.com",
                            PasswordHash = "asdasdasd123213",
                            SecurityStamp = "asd123",
                            Username = "kamil91"
                        },
                        new
                        {
                            Id = new Guid("b7d2a6c1-2ba1-4aa0-83ea-ffa0434f66c5"),
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 843, DateTimeKind.Local).AddTicks(6758),
                            Email = "jankowalski2@gmail.com",
                            PasswordHash = "asdasdasd123213",
                            SecurityStamp = "asd123",
                            Username = "kowalskijan3"
                        },
                        new
                        {
                            Id = new Guid("38e88f51-a4bd-4163-be6e-cdaad099ba10"),
                            Created = new DateTime(2018, 12, 29, 13, 11, 50, 843, DateTimeKind.Local).AddTicks(6774),
                            Email = "jankowalski2@gmail.com",
                            PasswordHash = "asdasdasd123213",
                            SecurityStamp = "asd123",
                            Username = "kowalskijan2"
                        });
                });

            modelBuilder.Entity("Movety.Persistence.DAO.Athlethe", b =>
                {
                    b.HasOne("Movety.Persistence.DAO.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposals", b =>
                {
                    b.HasOne("Movety.Persistence.DAO.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movety.Persistence.DAO.SportField", "SportField")
                        .WithMany()
                        .HasForeignKey("SportFieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposalsAcceptance", b =>
                {
                    b.HasOne("Movety.Persistence.DAO.TrainingProposals", "TrainingProposals")
                        .WithMany("TrainingProposalsAcceptances")
                        .HasForeignKey("TrainingProposalsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movety.Persistence.DAO.User", "User")
                        .WithMany("TrainingProposalsAcceptances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movety.Persistence.DAO.TrainingProposalsLikes", b =>
                {
                    b.HasOne("Movety.Persistence.DAO.TrainingProposals", "TrainingProposals")
                        .WithMany("TrainingProposalsLikes")
                        .HasForeignKey("TrainingProposalsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movety.Persistence.DAO.User", "User")
                        .WithMany("TrainingProposalsLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
